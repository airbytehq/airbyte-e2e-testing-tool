import org.jsonschema2pojo.SourceType
import com.bmuschko.gradle.docker.tasks.image.*

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This is a general purpose Gradle build.
 * Learn more about Gradle by exploring our samples at https://docs.gradle.org/7.2/samples
 */

buildscript {
    repositories {
        mavenCentral()
    }

    dependencies {
        classpath 'org.jsonschema2pojo:jsonschema2pojo-gradle-plugin:latest.integration'
    }
}

plugins {
    id 'application'
    id "io.freefair.lombok" version "6.5.0.3"
    id 'jsonschema2pojo'
    id 'com.bmuschko.docker-remote-api' version '8.0.0'
}
sourceCompatibility = 17
targetCompatibility = 17

version '0.4.3'

repositories {
    mavenCentral()
    mavenLocal()
    maven {
        url "https://airbyte.mycloudrepo.io/public/repositories/airbyte-public-jars/"
    }
}
application {
    mainClass = 'io.airbyte.testingtool.TestingTool'
    applicationDefaultJvmArgs = ['-XX:+ExitOnOutOfMemoryError', '-XX:MaxRAMPercentage=75.0']
}

dependencies {
    implementation platform('com.google.cloud:libraries-bom:26.1.0')

    implementation 'org.apache.logging.log4j:log4j-api:2.18.0'
    implementation 'org.apache.logging.log4j:log4j-core:2.18.0'
    implementation 'org.apache.logging.log4j:log4j-slf4j-impl:2.18.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.13.3'
    implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.13.3'
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'io.airbyte:airbyte-api:0.40.0-alpha'
    implementation 'com.google.cloud:google-cloud-secretmanager'
    implementation 'com.google.auth:google-auth-library-oauth2-http:1.10.0'
    implementation 'org.slf4j:slf4j-api:1.7.30'
}

jsonSchema2Pojo {
    sourceType = SourceType.YAMLSCHEMA
    source = files("${sourceSets.main.output.resourcesDir}/configmodels")
    targetDirectory = new File(project.buildDir, 'generated/src/gen/java/')

    targetPackage = 'io.airbyte.testingtool.scenario.config'
    useLongIntegers = true

    removeOldOutput = true

    generateBuilders = true
    includeConstructors = false
    includeSetters = true
    serializable = true
}

tasks.register('dockerBuildImage', DockerBuildImage) {
    inputDir = file("${project.projectDir}")
    images.add("${project.getName()}:${version}")
}
build.finalizedBy(dockerBuildImage)

tasks.register('getVersion'){
    println("${version}")
}
tasks.register('getProjectName'){
    println("${project.getName()}")
}
